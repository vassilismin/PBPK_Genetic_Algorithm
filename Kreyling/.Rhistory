Vart=0.15*Total_Blood
Wm_ven=0.01*Vven
Wm_art=0.01*Vart
return(c(
"Q_total"=Q_total, "V_blood"=Total_Blood, "V_ven"=Vven, "V_art"=Vart,
"w_rob"=parameters[1,1], "w_ht"=parameters[2,1], "w_ki"=parameters[3,1], "w_spl"=parameters[5,1], "w_lu"=parameters[6,1], "w_li"=parameters[7,1], "w_bone"=parameters[9,1], "w_git"=parameters[13,1],
"V_tis_rob"=parameters[1,2], "V_tis_ht"=parameters[2,2], "V_tis_ki"=parameters[3,2], "V_tis_spl"=parameters[5,2], "V_tis_lu"=parameters[6,2], "V_tis_li"=parameters[7,2], "V_tis_bone"=parameters[9,2], "V_tis_git"=parameters[13,2],
"V_cap_rob"=parameters[1,3], "V_cap_ht"=parameters[2,3], "V_cap_ki"=parameters[3,3], "V_cap_spl"=parameters[5,3], "V_cap_lu"=parameters[6,3], "V_cap_li"=parameters[7,3], "V_cap_bone"=parameters[9,3], "V_cap_git"=parameters[13,3],
"Q_rob"=parameters[1,4], "Q_ht"=parameters[2,4], "Q_ki"=parameters[3,4], "Q_spl"=parameters[5,4], "Q_lu"=parameters[6,4], "Q_li"=parameters[7,4], "Q_bone"=parameters[9,4], "Q_git"=parameters[13,4]
))
}
# Physiological parameters units
# V_blood, V_ven, V_art (ml): Volume of total blood, venous blood and arterial blood
# w_i (g):                    mass of tissue or organ "i"
# V_tis_i (ml):                volume of tissue or organ "i"
# V_cap_i (ml):                volume of capillary blood in tissue "i"
# Q_i, Q_total (ml/h):        regional blood flow of tissue or organ "i"
#===============================================
#2. Function to create initial values for ODEs
#===============================================
create.inits <- function(parameters, dose){
with( as.list(parameters),{
M_ht<-0; M_lu<-0; M_li<-0; M_spl<-0; M_ki<-0; M_git<-0; M_bone<-0; M_rob<-0;
M_cap_ht<-0; M_cap_lu<-0; M_cap_li<-0; M_cap_spl<-0; M_cap_ki<-0; M_cap_git<-0; M_cap_bone<-0; M_cap_rob<-0;
M_lumen <- 0;
M_ven <- dose; M_art<-0
M_feces<-0; M_urine<-0
return(c("M_ht" = M_ht, "M_lu" = M_lu,
"M_li" = M_li, "M_spl" = M_spl,
"M_ki" = M_ki, "M_git" = M_git,
"M_bone" = M_bone,"M_rob"=M_rob,
"M_cap_ht" = M_cap_ht, "M_cap_lu" = M_cap_lu,
"M_cap_li" = M_cap_li, "M_cap_spl" = M_cap_spl,
"M_cap_ki" = M_cap_ki, "M_cap_git" = M_cap_git,
"M_cap_bone" = M_cap_bone,"M_cap_rob"=M_cap_rob,
"M_lumen" = M_lumen,
"M_ven" = M_ven, "M_art" = M_art, "M_feces" = M_feces, "M_urine" = M_urine))
})
}
#==============
#3. ODEs System
#==============
ode.func <- function(time, inits, params){
position <- params[37:(37+15)]
fit_pars <- params[(37+16):length(params)]
with(as.list(c(inits, params)),{
P_ht <- fit_pars[position[1]]
P_lu <- fit_pars[position[2]]
P_li <- fit_pars[position[3]]
P_spl <- fit_pars[position[4]]
P_ki <- fit_pars[position[5]]
P_git <- fit_pars[position[6]]
P_bone <- fit_pars[position[7]]
P_rob <- fit_pars[position[8]]
x_ht <- fit_pars[position[9]]
x_lu <- fit_pars[position[10]]
x_li <- fit_pars[position[11]]
x_spl <- fit_pars[position[12]]
x_ki <- fit_pars[position[13]]
x_git <- fit_pars[position[14]]
x_bone <- fit_pars[position[15]]
x_rob <- fit_pars[position[16]]
CLE_f <- fit_pars[length(fit_pars)-1]
CLE_h <- fit_pars[length(fit_pars)]
CLE_u <- 0
# Concentrations (mg of NPs)/(g of wet tissue)
C_ht <- M_ht/w_ht
C_cap_ht <- M_cap_ht/V_cap_ht
C_lu <- M_lu/w_lu
C_cap_lu <- M_cap_lu/V_cap_lu
C_li <- M_li/w_li
C_cap_li <- M_cap_li/V_cap_li
C_spl <- M_spl/w_spl
C_cap_spl <- M_cap_spl/V_cap_spl
C_ki <- M_ki/w_ki
C_cap_ki <- M_cap_ki/V_cap_ki
C_git <- M_git/w_git
C_cap_git <- M_cap_git/V_cap_git
C_bone <- M_bone/w_bone
C_cap_bone <- M_cap_bone/V_cap_bone
C_rob <- M_rob/w_rob
C_cap_rob <- M_cap_rob/V_cap_rob
C_ven <- M_ven/V_ven
C_art <- M_art/V_art
# Heart
dM_cap_ht <- Q_ht*(C_art - C_cap_ht) - x_ht*Q_ht*(C_cap_ht - C_ht/P_ht)
dM_ht <- x_ht*Q_ht*(C_cap_ht - C_ht/P_ht)
# Lungs
dM_cap_lu <- Q_total*(C_ven - C_cap_lu) - x_lu*Q_total*(C_cap_lu - C_lu/P_lu)
dM_lu <-  x_lu*Q_total*(C_cap_lu - C_lu/P_lu)
# Liver
dM_cap_li <- Q_li*(C_art - C_cap_li) + Q_spl*(C_cap_spl - C_cap_li) + Q_git*(C_cap_git - C_cap_li) -
x_li*(Q_li)*(C_cap_li - C_li/P_li)
dM_li <- x_li*Q_li*(C_cap_li - C_li/P_li) - CLE_h*M_li
# Spleen
dM_cap_spl <- Q_spl*(C_art - C_cap_spl) - x_spl*Q_spl*(C_cap_spl - C_spl/P_spl)
dM_spl <- x_spl*Q_spl*(C_cap_spl - C_spl/P_spl)
# Kidneys
dM_cap_ki <- Q_ki*(C_art - C_cap_ki) - x_ki*Q_ki*(C_cap_ki - C_ki/P_ki)- CLE_u*M_cap_ki
dM_ki <- x_ki*Q_ki*(C_cap_ki - C_ki/P_ki)
# GIT - Gastrointestinal Track
dM_cap_git <- Q_git*(C_art - C_cap_git) - x_git*Q_git*(C_cap_git - C_git/P_git)
dM_git <- x_git*Q_git*(C_cap_git - C_git/P_git)
dM_lumen <- CLE_h*M_li - CLE_f *M_lumen
# Bone
dM_cap_bone <- Q_bone*(C_art - C_cap_bone) - x_bone*Q_bone*(C_cap_bone - C_bone/P_bone)
dM_bone <- x_bone*Q_bone*(C_cap_bone - C_bone/P_bone)
# RoB - Rest of Body
dM_cap_rob <- Q_rob*(C_art - C_cap_rob) - x_rob*Q_rob*(C_cap_rob - C_rob/P_rob)
dM_rob <- x_rob*Q_rob*(C_cap_rob - C_rob/P_rob)
# Urine
dM_urine <- CLE_u*M_cap_ki
# Feces
dM_feces <- CLE_f*M_lumen
# Venous Blood
dM_ven <- Q_ht*C_cap_ht + (Q_li + Q_spl+Q_git)*C_cap_li + Q_ki*C_cap_ki +
Q_bone*C_cap_bone + Q_rob*C_cap_rob - Q_total*C_ven
# Arterial Blood
dM_art <-  Q_total*C_cap_lu - Q_total*C_art
Blood_total <- M_ven + M_art + M_cap_ht + M_cap_lu +M_cap_li+M_cap_spl+
M_cap_ki+ M_cap_git+M_cap_bone+M_cap_rob
Blood <- Blood_total/(V_blood)
C_soft <- (M_git+M_lumen+M_rob)/(w_git + w_rob)
list(c("dM_ht" = dM_ht, "dM_lu" = dM_lu,
"dM_li" = dM_li, "dM_spl" = dM_spl,
"dM_ki" = dM_ki, "dM_git" = dM_git,
"dM_bone" = dM_bone,"dM_rob"=dM_rob,
"dM_cap_ht" = dM_cap_ht, "dM_cap_lu" = dM_cap_lu,
"dM_cap_li" = dM_cap_li, "dM_cap_spl" = dM_cap_spl,
"dM_cap_ki" = dM_cap_ki, "dM_cap_git" = dM_cap_git,
"dM_cap_bone" = dM_cap_bone,"dM_cap_rob"=dM_cap_rob,
"dM_lumen" = dM_lumen,
"dM_ven" = dM_ven, "dM_art" = dM_art, "dM_feces" = dM_feces, "dM_urine" = dM_urine),
"Blood"=Blood,
"C_ht"=C_ht, "C_lu"=C_lu, "C_li"=C_li, "C_spl"=C_spl,
"C_ki"=C_ki,  "C_bone"=C_bone, "C_soft"=C_soft,
"Feces"=M_feces)
})
}
#======================
#3. Objective function
#======================
obj.func <- function(par,...){
dots <- list(...)
with(as.list(dots),{
params <- c(phys_pars, position, exp(par))
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3))
concentrations <- data.frame(solution$time, solution$C_li, solution$C_spl, solution$C_ki,
solution$C_lu, solution$C_ht, solution$Blood,
solution$C_bone,  solution$C_soft)
concentrations <- concentrations[solution$time %in%time_points, 2:dim(concentrations)[2]]
excr_solution <-  data.frame(solution$time, solution$Feces)
excr_solution <- excr_solution[solution$time %in% excretion_time_points,2]
observed <- list()
predicted <- list()
for (i in 1:length(concentrations)) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion #feces
predicted[[i+1]] <- excr_solution #feces
discrepancy <- fitness.metric(observed, predicted)
return(discrepancy)
})
}
#===============
#4. Improved fitness metric
#===============
############# Calculate PBPK indices #############
# fitness.metric function the returns the compartment and consolidated (Total) discrepancy index
# of a PBPK model, given some experimental data. It follows the paper of Krishnan et al.1995.
# observed: list of vectors containing the experimental data
# predictions: list of vectors containing the predicted data
# names of the compartments
fitness.metric <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
Et <- 0 #relative error with observations
St <- 0  #relative error with simulations
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate the N_obs vector
for (j in 1:N){
# sum of relative squared errors (error = observed - predicted)
Et <- Et + ( abs(observed[[i]][j] - predicted[[i]][j])  / observed[[i]][j] )  ^2
St <- St + ( abs(observed[[i]][j] - predicted[[i]][j])  / predicted[[i]][j] )  ^2
}
# root mean of the square of observed values
RMEt <- sqrt(Et/N)
# root mean of the square of simulated values
RMSt <- sqrt( St/N)
I[i] <- (RMEt + RMSt)/2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
# Give weight to compartments with more observations (more information)
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
decode_ga <- function(real_num){
# Partition coefficient grouping
P1 <- floor(real_num[1])
P2 <- floor(real_num[2])
P3 <- floor(real_num[3])
P4 <- floor(real_num[4])
P5 <- floor(real_num[5])
P6 <- floor(real_num[6])
P7 <- floor(real_num[7])
P8 <- floor(real_num[8])
# Permeability coefficient grouping
X1 <- floor(real_num[9])
X2 <- floor(real_num[10])
X3 <- floor(real_num[11])
X4 <- floor(real_num[12])
X5 <- floor(real_num[13])
X6 <- floor(real_num[14])
X7 <- floor(real_num[15])
X8 <- floor(real_num[16])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
decode_ga_sppcg <- function(real_num)
{
# Partition coefficient grouping
P1 <- floor(real_num[1])
P2 <- floor(real_num[2])
P3 <- floor(real_num[3])
P4 <- floor(real_num[4])
P5 <- floor(real_num[5])
P6 <- floor(real_num[6])
P7 <- floor(real_num[7])
P8 <- floor(real_num[8])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8"))
return(out)
}
#=============================
#8. Create position
#=============================
# Function for creating the position from which to draw each param from the fitted params vector
create.position <- function(grouping){
#---------------------------
# Define fitting parameters
#---------------------------
N_p <-8 #   Number of partition coefficients
N_x <- 8#   Number of permeability coefficients
# Define size of P and X groups
P_groups <- length(unique(grouping[1:N_p]))  # sample size
X_groups <- length(unique(grouping[(N_p+1):(N_p+N_x)]))  # sample size
# set.seed(0)
# Initilise parameter values
fitted <- rep(NA, P_groups+X_groups+2)
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(grouping[1:N_p])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(grouping[(N_p+1):(N_p+N_x)])[j]))
}
# Define the total parameter vector names
names(fitted) <- c(pnames, xnames,"CLE_f",  "CLE_h")
# Variable for keeping which value in the fitted params vector corresponds to each coefficient
position = rep(NA, length(grouping))
for (i in 1:(length(position))){
if(i<=8){
position[i] <- which(names(fitted) == paste0("P", as.character(grouping[i])))
}else{
position[i] <- which(names(fitted) == paste0("X", as.character(grouping[i])))
}
}
fitted[] <- c(log(exp(runif(P_groups, 3,6))),log(exp(runif(X_groups+2, -3,1))))
return(list("position"=position,"fitted"=fitted, 'P_groups' = P_groups, X_groups = X_groups))
}
create.position_constrained <- function(grouping){
#---------------------------
# Define fitting parameters
#---------------------------
N_group <- 8 #   Number of groups fro partition and permeability coefficients
# Define size of P and X groups
P_groups <- length(unique(grouping))  # sample size
X_groups <- P_groups
# set.seed(0)
# Initilise parameter values
fitted <- rep(NA, P_groups+X_groups+2)
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(grouping[1:N_group])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(grouping[1:N_group])[j]))
}
# Define the total parameter vector names
names(fitted) <- c(pnames, xnames,"CLE_f",  "CLE_h")
# Variable for keeping which value in the fitted params vector corresponds to each coefficient
position = rep(NA, 2*length(grouping))
for (i in 1:(length(position)/2)){
position[i] <- which(names(fitted) == paste0("P", as.character(grouping[i])))
position[i+8] <- position[i] + P_groups
}
fitted[] <- c(log(exp(runif(P_groups, 3,6))),log(exp(runif(X_groups+2, -3,1))))
return(list("position"=position,"fitted"=fitted, 'P_groups' = P_groups, X_groups = X_groups))
}
#===============
# Load data
#===============
dose <- 18.15 # ug # Since results are in %ID we used a random dose that is within the dose range given to the rats
mass <- 263 #g, female Wistar Kyoto rats
# Load raw data from paper Kreyling et al.2017, which are given in %ID/g tissue
df_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 6, colNames = T, rowNames = T) # TiO2 NPs %ID/g of tissue  (Table 1)
excretion_percent <- openxlsx::read.xlsx("Kreyling-IV-data.xlsx", sheet = 3, colNames = T, rowNames = F) # accumulated excretory rate, expressed as %ID
# Drop the first time points because the graph is supposed to be cumulative dose but the cumulative feces in day 1 are less that the first time points
excretion_time <- round(excretion_percent[3:5,1])*24 # hours
# Convert doses from %ID to masses
df_all <- (df_percent/100) * dose # Concentrations in (ug of NPs)/(g of tissue)
# Drop unused compartments
df <- df_all[, !(names(df_all) %in% c("Uterus", "Brain", "Carcass"))]
excretion <- (excretion_percent[3:5,2]/100) * dose
compartments <- list( "RoB"="RoB","Heart"="Heart", "Kidneys"="Kidneys", "Brain"= NA, "Spleen"="Spleen",
"Lungs"="Lungs", "Liver"="Liver", "Uterus"= NA, "Bone"="Bone", "Adipose"=NA, "Skin"=NA, "Muscles"=NA, "GIT"="GIT") #used as input in function, compartments that are used in pbpk
# Nelder-Mead from dfoptim package
time_points <- c(1,4,24, 7*24, 28*24) # hours
excretion_time_points <- excretion_time
sample_time <- seq(0, 28*24, 1)
# Initialise vector of physiological parameters
phys_pars <- create.params(compartments,mass)
inits <- create.inits(phys_pars, dose)
# Create the parameter grouping for the max and ga problems
grouping_MANG <- c(1:8, 1:8)
grouping_MING <- c(rep(1,8), rep(1,8))
load("FPG.RData")
grouping_FPG <- decode_ga(GA_results@solution[1,])
load("PNG.RData")
grouping_PNG <- decode_ga(GA_results@solution[1,])
load("SPPCG.RData")
grouping_SPPCG <- decode_ga_sppcg(GA_results@solution[1,])
set.seed(seed)
# Create the position vector to match the ODE parameters with the fitted parameter values
create.position_MANG <- create.position(grouping_MANG)
position_MANG <- create.position_MANG$position
fitted_MANG <-  create.position_MANG$fitted
set.seed(seed)
# Create the position vector to match the ODE parameters with the fitted parameter values
create.position_MING <- create.position(grouping_MING)
position_MING <- create.position_MING$position
fitted_MING <-  create.position_MING$fitted
set.seed(seed)
# Create the position vector to match the ODE parameters with the fitted parameter values
create.position_FPG <- create.position(grouping_FPG)
position_FPG <- create.position_FPG$position
fitted_FPG <-  create.position_FPG$fitted
set.seed(seed)
# Create the position vector to match the ODE parameters with the fitted parameter values
create.position_PNG <- create.position(grouping_PNG)
position_PNG <- create.position_PNG$position
fitted_PNG <-  create.position_PNG$fitted
set.seed(seed)
# Create the position vector to match the ODE parameters with the fitted parameter values
create.position_SPPCG <- create.position_constrained(grouping_SPPCG)
position_SPPCG <- create.position_SPPCG$position
fitted_SPPCG <-  create.position_SPPCG$fitted
MAX = 2
#=======
# MANG #
#=======
try(
nm_optimizer_MANG<- dfoptim::nmk(par = fitted_MANG, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_MANG ),
silent = TRUE
)
if(exists("nm_optimizer_MANG")){
params_MANG<- exp(nm_optimizer_MANG$par)
value_MANG <- nm_optimizer_MANG$value
}else{
params_MANG<- NULL
value_MANG <- NULL
}
#=======
# MING #
#=======
try(
nm_optimizer_MING<- dfoptim::nmk(par = fitted_MING, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_MING ),
silent = TRUE
)
if(exists("nm_optimizer_MING")){
params_MING<- exp(nm_optimizer_MING$par)
value_MING <- nm_optimizer_MING$value
}else{
params_MING<- NULL
value_MING <- NULL
}
#=======
# FPG #
#=======
try(
nm_optimizer_FPG<- dfoptim::nmk(par = fitted_FPG, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_FPG ),
silent = TRUE
)
if(exists("nm_optimizer_FPG")){
params_FPG<- exp(nm_optimizer_FPG$par)
value_FPG <- nm_optimizer_FPG$value
}else{
params_FPG<- NULL
value_FPG <- NULL
}
#=======
# PNG #
#=======
try(
nm_optimizer_PNG<- dfoptim::nmk(par = fitted_PNG, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_PNG ),
silent = TRUE
)
if(exists("nm_optimizer_PNG")){
params_PNG<- exp(nm_optimizer_PNG$par)
value_PNG <- nm_optimizer_PNG$value
}else{
params_PNG<- NULL
value_PNG <- NULL
}
#========
# SPPCG #
#========
try(
nm_optimizer_SPPCG<- dfoptim::nmk(par = fitted_SPPCG, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_SPPCG ),
silent = TRUE
)
if(exists("nm_optimizer_SPPCG")){
params_SPPCG<- exp(nm_optimizer_SPPCG$par)
value_SPPCG <- nm_optimizer_SPPCG$value
}else{
params_SPPCG<- NULL
value_SPPCG <- NULL
}
params_MANG
nm_optimizer_MANG<- dfoptim::nmk(par = fitted_MANG, fn = obj.func,
control = list(maxfeval=MAX, trace=F), inits = inits,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position_MANG )
par = fitted_MANG
params <- c(phys_pars, position, exp(par))
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func,
y = inits, parms = params,
method="lsodes",rtol = 1e-3, atol = 1e-3))
