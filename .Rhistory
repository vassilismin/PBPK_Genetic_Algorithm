rmsd <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
summation <- 0
for ( i in 1:N){
summation <- summation + (y_obs[i]-y_pred[i])^2
}
rmsd <- sqrt(summation/N)
return(rmsd)
}
rmsd(predicted, observed)
#===============
# Load data
#===============
setwd("C:/Users/ptsir/Documents/GitHub/PBPK_Genetic_Algorithm")
dose_kg <- 10 # mg/kg rat body
mass <- 250 # g
dose <- dose_kg*mass/1000 # mg TiO2
# Load raw data from paper Xie et al.2011
df <- openxlsx::read.xlsx("TiO2_iv_rat.xlsx", sheet = 1, colNames = T, rowNames = T) # TiO2 NPs %ID/g of tissue  (Table 1)
excretion <- openxlsx::read.xlsx("Cummulative_Excretion.xlsx", sheet = 2, colNames = T, rowNames = F) # accumulated excretory rate, expressed as %ID
excretion_time <- round(excretion[,1])*24 # hours
excretion <- excretion[,c(2:3)]
# Transform to (mg of NPs)/(g of tissue)
df <- (df/100)*dose
df$Intestine <- df$Intestine +df$Stomach
colnames(df)[which(names(df)=="Intestine")] <- "Git"
df <- subset(df, select = -c(Stomach, Brain))
df[5,1] <- 1e-05
excretion <- (excretion/100)*dose
### Important!!! each compartment has a specific index vectors Tissue_fractions, Regional_flow_fractions, Capillary_fractions and cannot be changed
# The index of each compartment:
#Rest of Body (rob) --> 1
#Heart (ht) --> 2
#Kidneys (ki) --> 3
#Brain (br) --> 4
#Spleen (spl) --> 5
#Lungs (lu) --> 6
#Liver (li) --> 7
#Uterus (ut) --> 8
#Bone (bone) --> 9
#Adipose (ad) --> 10
#Skin (skin) --> 11
#Muscles (mu) --> 12
#Gastrointestinal track (GIT) --> 13
#### If any of these compartments don not exist in pbpk, just give it the value NA in compartments vector, example: "Heart" = NA and it will remove it
#### from the equilibriums and the corresponding V_tis, V_cap, Q will be equal to NA.
compartments <- list( "RoB"="RoB","Heart"="Heart", "Kidneys"="Kidneys", "Brain"= NA, "Spleen"="Spleen",
"Lungs"="Lungs", "Liver"="Liver", "Uterus"=NA, "Bone"="Bone", "Adipose"=NA, "Skin"=NA, "Muscles"=NA, "GIT"="GIT") #used as input in function, compartments that are used in pbpk
# Nelder-Mead from dfoptim package
y_init <- c(dose, rep(0,20))
time_points <- c(1,3,7, 15, 30)*24 # hours
excretion_time_points <- excretion_time
sample_time <- seq(0, 30*24, 1)
# Initialise vector of physiological parameters
phys_pars <- create.params(compartments,mass)
#---------------------------
N_p <- 8
N_x <- 8
grouping <- c(1:8,1:8)
# Define size of P and X groups
P_groups <- length(unique(grouping[1:N_p]))  # sample size
X_groups <- length(unique(grouping[(N_p+1):(N_p+N_x)]))  # sample size
# set.seed(0)
# Initilise parameter values
fitted <- rep(NA,P_groups+X_groups+3)
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(grouping[1:N_p])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(grouping[(N_p+1):(N_p+N_x)])[j]))
}
# Define the total parameter vector names
names(fitted) <- c(pnames, xnames,"CLE_f", "CLE_u")
# Variable for keeping which value in the fitted params vector corresponds to each coefficient
position = rep(NA, length(grouping))
for (i in 1:(length(position))){
if(i<=8){
position[i] <- which(names(fitted) == paste0("P", as.character(grouping[i])))
}else{
position[i] <- which(names(fitted) == paste0("X", as.character(grouping[i])))
}
}
# Some initialisations fail to obtain solution, so resample until you do
fitted[] <- c(log(exp(runif(P_groups, 3,6))),log(exp(runif(X_groups+3, -3,1))))
MAX <- 800
w_version <- "R-squared"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_r<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_r<- exp(nm_optimizer_max_r$par)
observed
w_version == "r.squared"
w_version <- "r-squared"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_r<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_r<- exp(nm_optimizer_max_r$par)
r.squared(observed, predicted)
params = fitted
w_version <- "r-squared"
# Create the matrix of the system
A <- create_ODE_matrix(phys_pars = phys_pars, fit_pars =exp(params),  position = position )
# Solve the ODE system using the exponential matrix method
solution <-  solve_exp_matrix(x = A, time = sample_time, y_init = y_init,phys_pars = phys_pars )
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
if(w_version == "r.squared"){
discrepancy <- r.squared(observed, predicted)
}else if(w_version == "PBPK_index"){
discrepancy <- pbpk.index(observed, predicted)
}else if(w_version == "proposed_metric"){
discrepancy <- fitness.metric(observed, predicted)
}else if(w_version == "two.fold"){
discrepancy <- two.fold(observed, predicted)
}else if(w_version == "AAFE"){
discrepancy <- AAFE(observed, predicted)
}else if(w_version == "rmsd"){
discrepancy <- rmsd(observed, predicted)
}
discrepancy
predicted
w_version == "r.squared"
w_version <- "r.squared"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_r<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_r<- exp(nm_optimizer_max_r$par)
obj.func <- function(params, ...){
dots <- list(...)
with(as.list(dots),{
# Create the matrix of the system
A <- create_ODE_matrix(phys_pars = phys_pars, fit_pars =exp(params),  position = position )
# Solve the ODE system using the exponential matrix method
solution <-  solve_exp_matrix(x = A, time = sample_time, y_init = y_init,phys_pars = phys_pars )
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
if(w_version == "r.squared"){
discrepancy <- - r.squared(observed, predicted)
}else if(w_version == "PBPK_index"){
discrepancy <- pbpk.index(observed, predicted)
}else if(w_version == "proposed_metric"){
discrepancy <- fitness.metric(observed, predicted)
}else if(w_version == "two.fold"){
discrepancy <- - two.fold(observed, predicted)
}else if(w_version == "AAFE"){
discrepancy <- AAFE(observed, predicted)
}else if(w_version == "rmsd"){
discrepancy <- rmsd(observed, predicted)
}
return(discrepancy)
})
}
w_version <- "r.squared"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_r<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_r<- exp(nm_optimizer_max_r$par)
w_version <- "PBPK_index"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_pbpk <- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_pbpk <- exp(nm_optimizer_max_pbpk$par)
pbpk.index <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
et <- 0 # errors
Et <-0  # experimental
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate tne N_obs vector
for (j in 1:N){
# sum of absolute squared errors (error = observed - predicted)
et <- et + (abs(observed[[i]][j] - predicted[[i]][j]))^2
# Sum of squared observed values
Et <- Et + (observed[[i]][j])^2
}
# root mean square of the absolute error
RMet2 <-sqrt(et/N)
# root mean of the square of observed values
RMEt2 <- sqrt(Et/N)
I[i] <- RMet2/RMEt2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
w_version <- "PBPK_index"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_pbpk <- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_pbpk <- exp(nm_optimizer_max_pbpk$par)
w_version <- "proposed_metric"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_new<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_new <- exp(nm_optimizer_max_new$par)
w_version <- "two.fold"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_two<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_two <- exp(nm_optimizer_max_two$par)
w_version <- "two.fold"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_two<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_two <- exp(nm_optimizer_max_two$par)
w_version <- "AAFE"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_aafe<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_aafe <- exp(nm_optimizer_max_aafe$par)
w_version <- "rmsd"
# Run the Nelder Mead algorithmm to estimate the parameter values
nm_optimizer_max_rmsd<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
max_params_rmsd <- exp(nm_optimizer_max_rmsd$par)
# Create the matrix of the system
A_r <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_r,  position = position )
A_pbpk <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_pbpk,  position = position )
A_new <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_new,  position = position )
A_two <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_two,  position = position )
A_aafe <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_aafe,  position = position )
A_rmsd<- create_ODE_matrix(phys_pars = phys_pars, fit_pars = max_params_rmsd,  position = position )
# Solve the ODE system using the exponential matrix method
solution_r <-  as.data.frame(solve_exp_matrix(x = A_r, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_r) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
solution_pbpk <-  as.data.frame(solve_exp_matrix(x = A_pbpk, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_pbpk) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
solution_new <-  as.data.frame(solve_exp_matrix(x = A_new, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_new) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
solution_two <-  as.data.frame(solve_exp_matrix(x = A_two, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_two) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
solution_aafe <-  as.data.frame(solve_exp_matrix(x = A_aafe, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_aafe) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
solution_rmsd <-  as.data.frame(solve_exp_matrix(x = A_rmsd, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_rmsd) <- c("Time","Blood", "Heart", "Lungs", "Liver", "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Create a single data frame to hold the observation data
observations <- data.frame( Time =c(24,  72, 168, 360, 720), excretion, df)
library(ggplot2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_r)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("R-squared")),
size=1.5,alpha = 0.7) +
geom_line(data=solution_pbpk, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("PBPK index")), size=1.5,alpha = 0.7) +
geom_line(data=solution_new, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("New metric")), size=1.5,alpha = 0.7) +
geom_line(data=solution_two, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("Two-fold percentage")), size=1.5,alpha = 0.7) +
geom_line(data=solution_aafe, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("AAFE")), size=1.5,alpha = 0.7) +
geom_line(data=solution_rmsd, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("RMSD")), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))#+
#scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_r)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("R-squared")),
size=1.5,alpha = 0.7) +
geom_line(data=solution_pbpk, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("PBPK index")), size=1.5,alpha = 0.7) +
geom_line(data=solution_new, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("New metric")), size=1.5,alpha = 0.7) +
geom_line(data=solution_two, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("Two-fold percentage")), size=1.5,alpha = 0.7) +
geom_line(data=solution_aafe, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("AAFE")), size=1.5,alpha = 0.7) +
geom_line(data=solution_rmsd, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("RMSD")), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_r)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("R-squared")),
size=1.5,alpha = 0.7) +
geom_line(data=solution_pbpk, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("PBPK index")), size=1.5,alpha = 0.7) +
geom_line(data=solution_new, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("New metric")), size=1.5,alpha = 0.7) +
geom_line(data=solution_two, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("Two-fold percentage")), size=1.5,alpha = 0.7) +
geom_line(data=solution_aafe, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("AAFE")), size=1.5,alpha = 0.7) +
geom_line(data=solution_rmsd, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("RMSD")), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))#+
#scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_r)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("R-squared")),
size=1.5,alpha = 0.7) +
geom_line(data=solution_pbpk, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("PBPK index")), size=1.5,alpha = 0.7) +
geom_line(data=solution_new, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("New metric")), size=1.5,alpha = 0.7) +
# geom_line(data=solution_two, aes_string(x= "Time", y= rlang::expr(!!compartment),
#                                             colour=shQuote("Two-fold percentage")), size=1.5,alpha = 0.7) +
geom_line(data=solution_aafe, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("AAFE")), size=1.5,alpha = 0.7) +
geom_line(data=solution_rmsd, aes_string(x= "Time", y= rlang::expr(!!compartment),
colour=shQuote("RMSD")), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))#+
#scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
save.image("~/GitHub/PBPK_Genetic_Algorithm/compare_metrics.RData")
