stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
et <- 0 # errors
Et <-0  # experimental
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate tne N_obs vector
for (j in 1:N){
# sum of absolute squared errors (error = observed - predicted)
et <- et + (abs(observed[[i]][j] - predicted[[i]][j]))^2
# Sum of squared observed values
Et <- Et + (observed[[i]][j])^2
}
# root mean square of the absolute error
RMet2 <-sqrt(et/N)
# root mean of the square of observed values
RMEt2 <- sqrt(Et/N)
I[i] <- RMet2/RMEt2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
metric.print <- function(x){
solution <- x
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
print(pbpk.index(observed, predicted))
print(r.squared(observed, predicted))
print(AAFE(observed, predicted))
print(rmsd(observed, predicted))
print(two.fold(observed, predicted))
}
metric.print(solution_MAEP)
metric.print(solution_MIEP)
metric.print(solution_GAFP)
metric.print(solution_GATP)
metric.print(solution_GATP)
nm_optimizer_MAEP$value
nm_optimizer_MIEP$value
nm_optimizer_GAFP$value
nm_optimizer_GATP$value
nm_optimizer_GACP$value
solution_MIEP <-  as.data.frame(solve_exp_matrix(x = A_MIEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_max) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
A_MIEP <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = params_MiEP,  position = position_MiEP)
A_MIEP <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = params_MIEP,  position = position_MIEP)
# Solve the ODE system using the exponential matrix method
solution_MIEP <-  as.data.frame(solve_exp_matrix(x = A_MIEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_max) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_MAEP <-  as.data.frame(solve_exp_matrix(x = A_MAEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_MAEP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_MIEP <-  as.data.frame(solve_exp_matrix(x = A_MIEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_MIEP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GAFP <-  as.data.frame(solve_exp_matrix(x = A_GAFP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GAFP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GATP <-  as.data.frame(solve_exp_matrix(x = A_GATP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GATP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GACP <-  as.data.frame(solve_exp_matrix(x = A_GACP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GACP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
A_GACP <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = params_GACP,  position = position_GACP)
# Solve the ODE system using the exponential matrix method
solution_MAEP <-  as.data.frame(solve_exp_matrix(x = A_MAEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_MAEP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_MIEP <-  as.data.frame(solve_exp_matrix(x = A_MIEP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_MIEP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GAFP <-  as.data.frame(solve_exp_matrix(x = A_GAFP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GAFP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GATP <-  as.data.frame(solve_exp_matrix(x = A_GATP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GATP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Solve the ODE system using the exponential matrix method
solution_GACP <-  as.data.frame(solve_exp_matrix(x = A_GACP, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution_GACP) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Create a single data frame to hold the observation data
observations <- data.frame( Time =c(24,  72, 168, 360, 720), excretion, df)
#####################
#   Metrics  ########
######################
# Function to estimate the percentage of percent of model-predicted concentrations
# falling within twofold of the corresponding observed concentrations
two.fold <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
# Counter for counting how many observations lie within two fold from the data
counter <- 0
for ( i in 1:N){
if ((y_pred[i]<=2*y_obs[i]) & (y_pred[i]>=0.5*y_obs[i])){
counter <- counter + 1
}
}
twofold_percentage <- (counter/N)*100
return(twofold_percentage)
}
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#  R-squared between predictions and observations
r.squared <- function(predictions, observations, times=NULL){
y_pred <- unlist(predictions)
y_obs <- unlist(observations)
lm.model <- lm(y_obs~y_pred)
r_squared <- summary(lm.model)$r.squared
return(r_squared)
}
#  Root-mean-square deviation
rmsd <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
summation <- 0
for ( i in 1:N){
summation <- summation + (y_obs[i]-y_pred[i])^2
}
rmsd <- sqrt(summation/N)
return(rmsd)
}
pbpk.index <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
et <- 0 # errors
Et <-0  # experimental
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate tne N_obs vector
for (j in 1:N){
# sum of absolute squared errors (error = observed - predicted)
et <- et + (abs(observed[[i]][j] - predicted[[i]][j]))^2
# Sum of squared observed values
Et <- Et + (observed[[i]][j])^2
}
# root mean square of the absolute error
RMet2 <-sqrt(et/N)
# root mean of the square of observed values
RMEt2 <- sqrt(Et/N)
I[i] <- RMet2/RMEt2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
metric.print <- function(x){
solution <- x
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
print(pbpk.index(observed, predicted))
print(r.squared(observed, predicted))
print(AAFE(observed, predicted))
print(rmsd(observed, predicted))
print(two.fold(observed, predicted))
}
metric.print(solution_MAEP)
metric.print(solution_MIEP)
metric.print(solution_GAFP)
metric.print(solution_GATP)
metric.print(solution_GATP)
metric.print(solution_GACP)
nm_optimizer_MAEP$value
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("R-MAEP" = "#56B4E9",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9,p10, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("MAEP" = "#56B4E9",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9,p10, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("MAEP" = "#CC79A7",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9,p10, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("MAEP" = "#CC79A7",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
#scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9,p10, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
library(ggplot2)
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("MAEP" = "#CC79A7",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
#scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
#gridExtra::grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, p9,p10, nrow = 4)
#gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
#gridExtra::grid.arrange(p9,p10,nrow = 2)
ggpubr::ggarrange(p1, p2, p3, p4,p5,p6,p7,p8, p9,p10, ncol=3, nrow=4,
common.legend = TRUE, legend="right")
# Defining the linetype and colour of each curve
ltp <- c("MAEP" = "twodash", "GAFP" = "solid", "GATP" = "dotted","GACP" = "dashed")
cls <-  c("MAEP" = "#CC79A7",  "GAFP" ="#000000", "GATP" = "#009E73", "GACP" ="#CC79A7",
"Observations" = "#D55E00")
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution_MAEP)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"MAEP"',linetype = '"MAEP"'),  size=1.5,alpha = 0.7) +
geom_line(data=solution_GAFP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GAFP"',linetype ='"GAFP"'), size=1.5,alpha = 0.9) +
geom_line(data=solution_GATP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color =  '"GATP"',linetype =  '"GATP"'), size=1.5,alpha = 0.7) +
geom_line(data=solution_GACP, aes_string(x= "Time", y= rlang::expr(!!compartment),
color = '"GACP"',linetype ='"GACP"'), size=1.5,alpha = 0.7) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
color='"Observations"'), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
#scale_y_continuous(trans='log10')+
scale_color_manual("",values=cls)+
scale_linetype_manual("Models", values=ltp)
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
library(ggplot2)
save.image("~/GitHub/PBPK_Genetic_Algorithm/Benchmarking_results.RData")
