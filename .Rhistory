}
# Define the total parameter vector names
names(x0) <- c(pnames, xnames,"CLE_f", "CLE_u")
x0
par
# Function for converting binary into integer (from )
decode_ga <- function(x)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
x <- GA::gray2binary(x)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-ifelse(GA::binary2decimal(x[1:4])<=13,GA::binary2decimal(x[1:4]),13)
if(P1 == 0){P1 <- 1}
P2 <-ifelse(GA::binary2decimal(x[5:8])<=13,GA::binary2decimal(x[5:8]),13)
if(P2 == 0){P2 <- 1}
P3 <-ifelse(GA::binary2decimal(x[9:12])<=13,GA::binary2decimal(x[9:12]),13)
if(P3 == 0){P3 <- 1}
P4 <-ifelse(GA::binary2decimal(x[13:16])<=13,GA::binary2decimal(x[13:16]),13)
if(P4 == 0){P4 <- 1}
P5 <-ifelse(GA::binary2decimal(x[17:20])<=13,GA::binary2decimal(x[17:20]),13)
if(P5 == 0){P5 <- 1}
P6 <-ifelse(GA::binary2decimal(x[21:24])<=13,GA::binary2decimal(x[21:24]),13)
if(P6 == 0){P6 <- 1}
P7 <-ifelse(GA::binary2decimal(x[25:28])<=13,GA::binary2decimal(x[25:28]),13)
if(P7 == 0){P7 <- 1}
P8 <-ifelse(GA::binary2decimal(x[29:32])<=13,GA::binary2decimal(x[29:32]),13)
if(P8 == 0){P8 <- 1}
P9 <-ifelse(GA::binary2decimal(x[33:36])<=13,GA::binary2decimal(x[33:36]),13)
if(P9 == 0){P9 <- 1}
P10 <-ifelse(GA::binary2decimal(x[37:40])<=13,GA::binary2decimal(x[37:40]),13)
if(P10 == 0){P10 <- 1}
P11 <-ifelse(GA::binary2decimal(x[41:44])<=13,GA::binary2decimal(x[41:44]),13)
if(P11 == 0){P11 <- 1}
P12 <-ifelse(GA::binary2decimal(x[45:48])<=13,GA::binary2decimal(x[45:48]),13)
if(P12 == 0){P12 <- 1}
P13 <-ifelse(GA::binary2decimal(x[49:52])<=13,GA::binary2decimal(x[49:52]),13)
if(P13 == 0){P13 <- 1}
# Permeability coefficient grouping
X1 <-ifelse(GA::binary2decimal(x[53:56])<=13,GA::binary2decimal(x[53:56]),13)
if(X1 == 0){X1 <- 1}
X2 <-ifelse(GA::binary2decimal(x[57:60])<=13,GA::binary2decimal(x[57:60]),13)
if(X2 == 0){X2 <- 1}
X3 <-ifelse(GA::binary2decimal(x[61:64])<=13,GA::binary2decimal(x[61:64]),13)
if(X3 == 0){X3 <- 1}
X4 <-ifelse(GA::binary2decimal(x[65:68])<=13,GA::binary2decimal(x[65:68]),13)
if(X4 == 0){X4 <- 1}
X5 <-ifelse(GA::binary2decimal(x[69:72])<=13,GA::binary2decimal(x[69:72]),13)
if(X5 == 0){X5 <- 1}
X6 <-ifelse(GA::binary2decimal(x[73:76])<=13,GA::binary2decimal(x[73:76]),13)
if(X6 == 0){X6 <- 1}
X7 <-ifelse(GA::binary2decimal(x[77:80])<=13,GA::binary2decimal(x[77:80]),13)
if(X7 == 0){X7 <- 1}
X8 <-ifelse(GA::binary2decimal(x[81:84])<=13,GA::binary2decimal(x[81:84]),13)
if(X8 == 0){X8 <- 1}
X9 <-ifelse(GA::binary2decimal(x[85:88])<=13,GA::binary2decimal(x[85:88]),13)
if(X9 == 0){X9 <- 1}
X10 <-ifelse(GA::binary2decimal(x[89:92])<=13,GA::binary2decimal(x[89:92]),13)
if(X10 == 0){X10 <- 1}
X11 <-ifelse(GA::binary2decimal(x[93:96])<=13,GA::binary2decimal(x[93:96]),13)
if(X11 == 0){X11 <- 1}
X12 <-ifelse(GA::binary2decimal(x[97:100])<=13,GA::binary2decimal(x[97:100]),13)
if(X12 == 0){X12 <- 1}
X13 <-ifelse(GA::binary2decimal(x[101:104])<=13,GA::binary2decimal(x[101:104]),13)
if(X13 == 0){X13 <- 1}
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,X1,X2,X3,X4,X5,
X6,X7,X8,X9,X10,X11,X12,X13), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8","P9", "P10", "P11", "P12", "P13", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11", "X12", "X13"))
return(out)
}
par <- decode_ga(x)
# Define size of P and X groups
P_groups <- length(unique(par[1:13]))  # sample size
X_groups <- length(unique(par[14:length(par)]))  # sample size
set.seed(0)
# Initilise parameter values
x0 <- log(runif(P_groups+X_groups+2, 1e-05,100))
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(par[1:13])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(par[14:length(par)])[j]))
}
# Define the total parameter vector names
names(x0) <- c(pnames, xnames,"CLE_f", "CLE_u")
x0
names(x) <- names(x0)
params <- c(physiological_params, exp(x))
params
x = x0
params <- c(physiological_params, exp(x))
params <- c(physiological_params, exp(x))
params
?dfoptim::nmk
par
# Nelder-Mead from dfoptim package
y_init <- c(dose, rep(0,19))
time_points <- c(1,3,7, 15, 30)*24 # hours
excretion_time_points <- excretion_time
sample_time <- seq(0, 30*24, 1)
# Initialise vector of physiological parameters
physiological_params <- create.params(compartments,mass)
#---------------------------
# Define fitting parameters
#---------------------------
# Convert the binary encoding to integer
grouping <- decode_ga(x)
# Define size of P and X groups
P_groups <- length(unique(par[1:13]))  # sample size
X_groups <- length(unique(par[14:length(par)]))  # sample size
set.seed(0)
# Initilise parameter values
fitted <- log(runif(P_groups+X_groups+2, 1e-05,100))
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(par[1:13])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(par[14:length(par)])[j]))
}
# Define the total parameter vector names
names(fitted) <- c(pnames, xnames,"CLE_f", "CLE_u")
params <- c(physiological, exp(fitted),grouping)
physiological = physiological_params
params <- c(physiological, exp(fitted),grouping)
params
params <- c(physiological, exp(fitted),grouping)
params
grouping
grouping <- decode_ga(x)
x
binary_test <- x <- rbinom(n=104, size=1, prob=0.5)
grouping <- decode_ga(x)
params <- c(physiological, exp(fitted),grouping)
params
params <- list(physiological, exp(fitted),grouping = grouping)
params
myf <- function(parameters){
with(as.list(parameters),{
print(gouping)
})
}
myf(params)
params
params <- c(physiological, exp(fitted),grouping = grouping)
params
myf <- function(parameters){
with(as.list(parameters),{
print(gouping)
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
print(parameters)
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
print(V_blood)
})
}
myf(params)
physiological
as.list(physiological)
params <- list(as.list(physiological), as.list(exp(fitted)),grouping = grouping)
params
params <- list(as.list(physiological), as.list(exp(fitted)),grouping = grouping)
params <- list(as.list(physiological), as.list(exp(fitted)),grouping = grouping)
myf <- function(parameters){
with(as.list(parameters),{
print(grouping)
})
}
myf(params)
myf(X1)
myf(CLE_u)
params <- C(physiological, exp(fitted),as.list(grouping))
params <- c(physiological, exp(fitted),as.list(grouping))
params
params <- list(physiological, exp(fitted),grouping = grouping)
params
myf <- function(parameters){
with(as.list(parameters),{
print(grouping)
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
print(Q_lu)
})
}
myf <- function(parameters){
with(as.list(parameters),{
print(grouping)
})
}
myf(Q_lu)
myf <- function(parameters){
with(unlist(parameters),{
print(grouping)
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
print(grouping)
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
print(Q_lu)
})
}
myf(params)
params <- list(c(physiological, exp(fitted)),grouping = grouping)
params
params <- list(pars = c(physiological, exp(fitted)),grouping = grouping)
myf <- function(parameters){
with(as.list(parameters),{
with(as.list(pars),{
print(Q_lu)
})
})
}
myf(pars)
params <- list(pars = c(physiological, exp(fitted)),grouping = grouping)
params
myf <- function(parameters){
with(as.list(parameters),{
print(grouping)
# with(as.list(pars),{
#  print(Q_lu)
#})
})
}
params <- list(used_pars = c(physiological, exp(fitted)),grouping = grouping)
myf(pars)
params <- list(pars = c(physiological, exp(fitted)),grouping = grouping)
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
with(as.list(pars),{
print(Q_lu)
})
})
}
myf(params)
myf <- function(parameters){
with(as.list(parameters),{
with(as.list(pars),{
print(grouping)
})
})
}
myf(params)
params <- c(physiological, exp(fitted))
params
bin2int <- function(x){
num <- GA::binary2decimal(x)
if(num == 0 || num == 1){
return(1)
}else if(num == 2 || num == 3){
return(2)
}else if(num == 4 || num == 5){
return(3)
}else if(num == 6 || num == 7){
return(4)
}else if(num == 8 || num == 9){
return(5)
}else if(num == 10 || num == 11){
return(6)
}else if(num == 12 || num == 13){
return(7)
}else if(num == 14 || num == 15){
return(8)
}
}
# Function for converting binary into integer (from )
decode_ga <- function(x)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
x <- GA::gray2binary(x)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-bin2int(x[1:4])
P2 <-bin2int(x[5:8])
P3 <-bin2int(x[9:12])
P4 <-bin2int(x[13:16])
P5 <-bin2int(x[17:20])
P6 <-bin2int(x[21:24])
P7 <-bin2int(x[25:28])
P8 <-bin2int(x[29:32])
# Permeability coefficient grouping
X1 <-bin2int(x[33:36])
X2 <-bin2int(x[37:40])
X3 <-bin2int(x[41:44])
X4 <-bin2int(x[45:48])
X5 <-bin2int(x[49:52])
X6 <-bin2int(x[53:56])
X7 <-bin2int(x[57:60])
X8 <-bin2int(x[61:64])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
binary_test <- x <- rbinom(n=64, size=1, prob=0.5)
x
decode_ga(binary_test)
x <- GA::gray2binary(x)
# Function for converting binary into integer (from )
decode_ga <- function(binary_num)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
gray_num <- GA::gray2binary(binary_num)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-bin2int(gray_num[1:4])
P2 <-bin2int(gray_num[5:8])
P3 <-bin2int(gray_num[9:12])
P4 <-bin2int(gray_num[13:16])
P5 <-bin2int(gray_num[17:20])
P6 <-bin2int(gray_num[21:24])
P7 <-bin2int(gray_num[25:28])
P8 <-bin2int(gray_num[29:32])
# Permeability coefficient grouping
X1 <-bin2int(gray_num[33:36])
X2 <-bin2int(gray_num[37:40])
X3 <-bin2int(gray_num[41:44])
X4 <-bin2int(gray_num[45:48])
X5 <-bin2int(gray_num[49:52])
X6 <-bin2int(gray_num[53:56])
X7 <-bin2int(gray_num[57:60])
X8 <-bin2int(gray_num[61:64])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
# Function for mapping the binary number to integer
# Since with 4 digits numbers from 0-15 can be mapped and here we have 8
# different compartments, every two integers correspond to one compartment
bin2int <- function(bin_seq){
int <- GA::binary2decimal(bin_seq)
if(int == 0 || int == 1){
return(1)
}else if(int == 2 || int == 3){
return(2)
}else if(int == 4 || int == 5){
return(3)
}else if(int == 6 || int == 7){
return(4)
}else if(int == 8 || int == 9){
return(5)
}else if(int == 10 || int == 11){
return(6)
}else if(int == 12 || int == 13){
return(7)
}else if(int == 14 || int == 15){
return(8)
}
}
# Function for converting binary into integer (from )
decode_ga <- function(binary_num)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
gray_num <- GA::gray2binary(binary_num)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-bin2int(gray_num[1:4])
P2 <-bin2int(gray_num[5:8])
P3 <-bin2int(gray_num[9:12])
P4 <-bin2int(gray_num[13:16])
P5 <-bin2int(gray_num[17:20])
P6 <-bin2int(gray_num[21:24])
P7 <-bin2int(gray_num[25:28])
P8 <-bin2int(gray_num[29:32])
# Permeability coefficient grouping
X1 <-bin2int(gray_num[33:36])
X2 <-bin2int(gray_num[37:40])
X3 <-bin2int(gray_num[41:44])
X4 <-bin2int(gray_num[45:48])
X5 <-bin2int(gray_num[49:52])
X6 <-bin2int(gray_num[53:56])
X7 <-bin2int(gray_num[57:60])
X8 <-bin2int(gray_num[61:64])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
binary_test <- x <- rbinom(n=64, size=1, prob=0.5)
binary_test
print(decode_ga(binary_test))
binary_num <- x
gray_num <- GA::gray2binary(binary_num)
gray_num <- GA::gray2binary(binary_num)
gray_num
bin_seq <- gray_num[61:64]
bin_seq
GA::binary2decimal(bin_seq)
bin_seq <- gray_num[57:60]
bin_seq
GA::binary2decimal(bin_seq)
gray_num
x
gray_num[1:4]
bin_seq <- gray_num[1:4]
GA::binary2decimal(bin_seq)
binary_test <- x <- rbinom(n=64, size=1, prob=0.5)
# Function for mapping the binary number to integer
# Since with 4 digits numbers from 0-15 can be mapped and here we have 8
# different compartments, every two integers correspond to one compartment
bin2int <- function(bin_seq){
int <- GA::binary2decimal(bin_seq)
if(int == 0 || int == 1){
return(1)
}else if(int == 2 || int == 3){
return(2)
}else if(int == 4 || int == 5){
return(3)
}else if(int == 6 || int == 7){
return(4)
}else if(int == 8 || int == 9){
return(5)
}else if(int == 10 || int == 11){
return(6)
}else if(int == 12 || int == 13){
return(7)
}else if(int == 14 || int == 15){
return(8)
}
}
# Function for converting binary into integer (from )
decode_ga <- function(binary_num)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
gray_num <- GA::gray2binary(binary_num)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-bin2int(gray_num[1:4])
P2 <-bin2int(gray_num[5:8])
P3 <-bin2int(gray_num[9:12])
P4 <-bin2int(gray_num[13:16])
P5 <-bin2int(gray_num[17:20])
P6 <-bin2int(gray_num[21:24])
P7 <-bin2int(gray_num[25:28])
P8 <-bin2int(gray_num[29:32])
# Permeability coefficient grouping
X1 <-bin2int(gray_num[33:36])
X2 <-bin2int(gray_num[37:40])
X3 <-bin2int(gray_num[41:44])
X4 <-bin2int(gray_num[45:48])
X5 <-bin2int(gray_num[49:52])
X6 <-bin2int(gray_num[53:56])
X7 <-bin2int(gray_num[57:60])
X8 <-bin2int(gray_num[61:64])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
print(binary_test)
print(decode_ga(binary_test))
# Function for converting binary into integer (from )
decode_ga <- function(binary_num)
{
# Convert binary encoding to gray encoding to avoid the Hamming cliff problem
#gray_num <- GA::gray2binary(binary_num)
gray_num <-(binary_num)
#Four digit binary encodes up to 15, if we are past 13, assign the value 13
# Partition coefficient grouping
P1 <-bin2int(gray_num[1:4])
P2 <-bin2int(gray_num[5:8])
P3 <-bin2int(gray_num[9:12])
P4 <-bin2int(gray_num[13:16])
P5 <-bin2int(gray_num[17:20])
P6 <-bin2int(gray_num[21:24])
P7 <-bin2int(gray_num[25:28])
P8 <-bin2int(gray_num[29:32])
# Permeability coefficient grouping
X1 <-bin2int(gray_num[33:36])
X2 <-bin2int(gray_num[37:40])
X3 <-bin2int(gray_num[41:44])
X4 <-bin2int(gray_num[45:48])
X5 <-bin2int(gray_num[49:52])
X6 <-bin2int(gray_num[53:56])
X7 <-bin2int(gray_num[57:60])
X8 <-bin2int(gray_num[61:64])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
print(decode_ga(binary_test))
