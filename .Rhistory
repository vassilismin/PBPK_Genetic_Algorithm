colnames(concentrations) <- c("Time","C_blood", "C_ht", "C_lu", "C_li",
"C_spl", "C_ki", "C_git", "C_bone", "Feces", "Urine")
#return(list(y_t, concentrations))
return(data.frame(concentrations))
})
}
#===============
#4. Improved fitness metric
#===============
############# Calculate PBPK indices #############
# fitness.metric function the returns the compartment and consolidated (Total) discrepancy index
# of a PBPK model, given some experimental data. It follows the paper of Krishnan et al.1995.
# observed: list of vectors containing the experimental data
# predictions: list of vectors containing the predicted data
# names of the compartments
fitness.metric <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
Et <- 0 #relative error with observations
St <- 0  #relative error with simulations
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate the N_obs vector
for (j in 1:N){
# sum of relative squared errors (error = observed - predicted)
Et <- Et + ( abs(observed[[i]][j] - predicted[[i]][j])  / observed[[i]][j] )  ^2
St <- St + ( abs(observed[[i]][j] - predicted[[i]][j])  / predicted[[i]][j] )  ^2
}
# root mean of the square of observed values
RMEt <- sqrt(Et/N)
# root mean of the square of simulated values
RMSt <- sqrt( St/N)
I[i] <- (RMEt + RMSt)/2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
# Give weight to compartments with more observations (more information)
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
#======================
#5. Objective function
#======================
obj.func <- function(params, ...){
dots <- list(...)
with(as.list(dots),{
# Create the matrix of the system
A <- create_ODE_matrix(phys_pars = phys_pars, fit_pars =exp(params),  position = position )
# Solve the ODE system using the exponential matrix method
solution <-  solve_exp_matrix(x = A, time = sample_time, y_init = y_init,phys_pars = phys_pars )
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
discrepancy <- fitness.metric(observed, predicted)
return(discrepancy)
})
}
#==================
#6.Binary mapping
#==================
# Function for mapping the binary number to integer
# Since with 4 digits numbers from 0-15 can be mapped and here we have 8
# different compartments, every two integers correspond to one compartment
bin2int <- function(bin_seq){
int <- GA::binary2decimal(bin_seq)
if(int == 0 || int == 1){
return(1)
}else if(int == 2 || int == 3){
return(2)
}else if(int == 4 || int == 5){
return(3)
}else if(int == 6 || int == 7){
return(4)
}else if(int == 8 || int == 9){
return(5)
}else if(int == 10 || int == 11){
return(6)
}else if(int == 12 || int == 13){
return(7)
}else if(int == 14 || int == 15){
return(8)
}
}
#=============================
#7. Convert binary to grouping
#=============================
# Function for converting binary into integer (from )
decode_ga <- function(binary_num)
{
#Two digit binary encodes up to 3
# Partition coefficient grouping
P1 <-ifelse(GA::binary2decimal(binary_num[1:2])==0,1,GA::binary2decimal(binary_num[1:2]))
P2 <-ifelse(GA::binary2decimal(binary_num[3:4])==0,1,GA::binary2decimal(binary_num[3:4]))
P3 <-ifelse(GA::binary2decimal(binary_num[5:6])==0,1,GA::binary2decimal(binary_num[5:6]))
P4 <-ifelse(GA::binary2decimal(binary_num[7:8])==0,1,GA::binary2decimal(binary_num[7:8]))
P5 <-ifelse(GA::binary2decimal(binary_num[9:10])==0,1,GA::binary2decimal(binary_num[9:10]))
P6 <-ifelse(GA::binary2decimal(binary_num[11:12])==0,1,GA::binary2decimal(binary_num[11:12]))
P7 <-ifelse(GA::binary2decimal(binary_num[13:14])==0,1,GA::binary2decimal(binary_num[13:14]))
P8 <-ifelse(GA::binary2decimal(binary_num[15:16])==0,1,GA::binary2decimal(binary_num[15:16]))
# Permeability coefficient grouping
X1 <-ifelse(GA::binary2decimal(binary_num[17:18])==0,1,GA::binary2decimal(binary_num[17:18]))
X2 <-ifelse(GA::binary2decimal(binary_num[19:20])==0,1,GA::binary2decimal(binary_num[19:20]))
X3 <-ifelse(GA::binary2decimal(binary_num[21:22])==0,1,GA::binary2decimal(binary_num[21:22]))
X4 <-ifelse(GA::binary2decimal(binary_num[23:24])==0,1,GA::binary2decimal(binary_num[23:24]))
X5 <-ifelse(GA::binary2decimal(binary_num[25:26])==0,1,GA::binary2decimal(binary_num[25:26]))
X6 <-ifelse(GA::binary2decimal(binary_num[27:28])==0,1,GA::binary2decimal(binary_num[27:28]))
X7 <-ifelse(GA::binary2decimal(binary_num[29:30])==0,1,GA::binary2decimal(binary_num[29:30]))
X8 <-ifelse(GA::binary2decimal(binary_num[31:32])==0,1,GA::binary2decimal(binary_num[31:32]))
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
#=============================
#8. Create position
#=============================
# Function for creating the position from which to draw each param from the fitted params vector
create.position <- function(grouping){
#---------------------------
# Define fitting parameters
#---------------------------
N_p <-8 #   Number of partition coefficients
N_x <- 8#   Number of permeability coefficients
# Define size of P and X groups
P_groups <- length(unique(grouping[1:N_p]))  # sample size
X_groups <- length(unique(grouping[(N_p+1):(N_p+N_x)]))  # sample size
# set.seed(0)
# Initilise parameter values
fitted <- rep(NA, P_groups+X_groups+3)
# Initialise naming vectors
pnames <- rep(NA, P_groups)
xnames <- rep(NA, X_groups)
#Define names for P and X groups
for (i in 1:P_groups){
pnames[i] <- paste0("P", as.character(unique(grouping[1:N_p])[i]))
}
for (j in 1:X_groups){
xnames[j] <- paste0("X", as.character(unique(grouping[(N_p+1):(N_p+N_x)])[j]))
}
# Define the total parameter vector names
names(fitted) <- c(pnames, xnames,"CLE_f", "CLE_u", "CLE_h")
# Variable for keeping which value in the fitted params vector corresponds to each coefficient
position = rep(NA, length(grouping))
for (i in 1:(length(position))){
if(i<=8){
position[i] <- which(names(fitted) == paste0("P", as.character(grouping[i])))
}else{
position[i] <- which(names(fitted) == paste0("X", as.character(grouping[i])))
}
}
fitted[] <- c(log(exp(runif(P_groups, 3,6))),log(exp(runif(X_groups+3, -3,1))))
return(list("position"=position,"fitted"=fitted))
}
#===============
# Load data
#===============
setwd("C:/Users/user/Documents/GitHub/PBPK_Genetic_Algorithm")
dose_kg <- 10 # mg/kg rat body
mass <- 250 # g
dose <- dose_kg*mass/1000 # mg TiO2
# Load raw data from paper Xie et al.2011
df <- openxlsx::read.xlsx("TiO2_iv_rat.xlsx", sheet = 1, colNames = T, rowNames = T) # TiO2 NPs %ID/g of tissue  (Table 1)
excretion <- openxlsx::read.xlsx("Cummulative_Excretion.xlsx", sheet = 2, colNames = T, rowNames = F) # accumulated excretory rate, expressed as %ID
excretion_time <- round(excretion[,1])*24 # hours
excretion <- excretion[,c(2:3)]
# Transform to (mg of NPs)/(g of tissue)
df <- (df/100)*dose
df$Intestine <- df$Intestine +df$Stomach
colnames(df)[which(names(df)=="Intestine")] <- "Git"
df <- subset(df, select = -c(Stomach, Brain))
df[5,1] <- 1e-05
excretion <- (excretion/100)*dose
### Important!!! each compartment has a specific index vectors Tissue_fractions, Regional_flow_fractions, Capillary_fractions and cannot be changed
# The index of each compartment:
#Rest of Body (rob) --> 1
#Heart (ht) --> 2
#Kidneys (ki) --> 3
#Brain (br) --> 4
#Spleen (spl) --> 5
#Lungs (lu) --> 6
#Liver (li) --> 7
#Uterus (ut) --> 8
#Bone (bone) --> 9
#Adipose (ad) --> 10
#Skin (skin) --> 11
#Muscles (mu) --> 12
#Gastrointestinal track (GIT) --> 13
#### If any of these compartments don not exist in pbpk, just give it the value NA in compartments vector, example: "Heart" = NA and it will remove it
#### from the equilibriums and the corresponding V_tis, V_cap, Q will be equal to NA.
compartments <- list( "RoB"="RoB","Heart"="Heart", "Kidneys"="Kidneys", "Brain"= NA, "Spleen"="Spleen",
"Lungs"="Lungs", "Liver"="Liver", "Uterus"=NA, "Bone"="Bone", "Adipose"=NA, "Skin"=NA, "Muscles"=NA, "GIT"="GIT") #used as input in function, compartments that are used in pbpk
# Nelder-Mead from dfoptim package
y_init <- c(dose, rep(0,20))
time_points <- c(1,3,7, 15, 30)*24 # hours
excretion_time_points <- excretion_time
sample_time <- seq(0, 30*24, 1)
# Initialise vector of physiological parameters
phys_pars <- create.params(compartments,mass)
load("ga_bin_results_3P3X_real.RData")
GA_results@solution
GA_results@bestSol
decode_ga <- function(real_num)
{
# Partition coefficient grouping
P1 <- floor(real_num[1])
P2 <- floor(real_num[2])
P3 <- floor(real_num[3])
P4 <- floor(real_num[4])
P5 <- floor(real_num[5])
P6 <- floor(real_num[6])
P7 <- floor(real_num[7])
P8 <- floor(real_num[8])
# Permeability coefficient grouping
X1 <- floor(real_num[9])
X2 <- floor(real_num[10])
X3 <- floor(real_num[11])
X4 <- floor(real_num[12])
X5 <- floor(real_num[13])
X6 <- floor(real_num[14])
X7 <- floor(real_num[15])
X8 <- floor(real_num[16])
out <- structure(c(P1,P2,P3,P4,P5,P6,P7,P8, X1,X2,X3,X4,X5,
X6,X7,X8), names = c("P1","P2","P3","P4",
"P5","P6", "P7", "P8", "X1",
"X2", "X3", "X4", "X5", "X6", "X7", "X8"))
return(out)
}
GA_results@solution[1,]
grouping1 <- decode_ga(GA_results@solution[1,])
grouping2 <- decode_ga(GA_results@solution[2,])
grouping3 <- decode_ga(GA_results@solution[3,])
grouping1
grouping2
grouping3
decode_ga(GA_results@solution[4,])
decode_ga(GA_results@solution[15,])
GA_results@solution
load("ga_bin_results_3P3X_real.RData")
# Create the parameter grouping for the max and ga problems
grouping <- decode_ga(GA_results@solution[1,])
# Create the position vector to match the ODE parameters with the fitted parameter values
position <- create.position(grouping)$position
load("ga_bin_results_3P3X_real.RData")
# Create the parameter grouping for the max and ga problems
grouping <- decode_ga(GA_results@solution[1,])
# Create the position vector to match the ODE parameters with the fitted parameter values
position <- create.position(grouping)$position
MAX <- 1000
# Initialise fitted
fitted <-  log(c(1e01,1e02,1e03,0.0001,0.01,1,1,1e02,1e-04))
nm_optimizer<- dfoptim::nmk(par = fitted, fn = obj.func,
control = list(maxfeval=MAX, trace=T), y_init = y_init,
time_points = time_points,
excretion_time_points =  excretion_time_points,
sample_time = sample_time,
phys_pars = phys_pars,
position = position )
params<- exp(nm_optimizer$par)
params<- exp(nm_optimizer$par)
params
# Create the matrix of the system
A <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = params,  position = position)
# Create the matrix of the system
A <- create_ODE_matrix(phys_pars = phys_pars, fit_pars = params,  position = position)
# Solve the ODE system using the exponential matrix method
solution <-  as.data.frame(solve_exp_matrix(x = A, time = sample_time,
y_init = y_init,phys_pars = phys_pars ))
names(solution) <- c("Time", "Blood", "Heart", "Lungs", "Liver",  "Spleen",
"Kidneys","Git", "Bone",  "Feces", "Urine")
# Function to estimate the percentage of percent of model-predicted concentrations
# falling within twofold of the corresponding observed concentrations
two.fold <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
# Counter for counting how many observations lie within two fold from the data
counter <- 0
for ( i in 1:N){
if ((y_pred[i]<=2*y_obs[i]) & (y_pred[i]>=0.5*y_obs[i])){
counter <- counter + 1
}
}
twofold_percentage <- (counter/N)*100
return(twofold_percentage)
}
#  absolute average fold error
AAFE <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
log_ratio <- rep(NA, N)
for ( i in 1:N){
log_ratio[i] <- abs(log((y_pred[i]/y_obs[i]), base = 10))
}
aafe <- 10^(sum(log_ratio)/N)
return(aafe)
}
#  R-squared between predictions and observations
r.squared <- function(predictions, observations, times=NULL){
y_pred <- unlist(predictions)
y_obs <- unlist(observations)
lm.model <- lm(y_obs~y_pred)
r_squared <- summary(lm.model)$r.squared
return(r_squared)
}
#  Root-mean-square deviation
rmsd <- function(predictions, observations, times=NULL){
y_obs <- unlist(observations)
y_pred <- unlist(predictions)
# Total number of observations
N<- length(y_obs)
summation <- 0
for ( i in 1:N){
summation <- summation + (y_obs[i]-y_pred[i])^2
}
rmsd <- sqrt(summation/N)
return(rmsd)
}
pbpk.index <- function(observed, predicted, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted)){
stop(" The observations and predictions must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted)){
stop(" The observations and predictions must have the same compartments")
}
Ncomp <- length(observed) # Number of compartments
I <- rep(NA, Ncomp) # Compartment discrepancy index
N_obs <- rep(NA, Ncomp) #Number of observations per compartment
#loop over the compartments
for (i in 1:Ncomp){
et <- 0 # errors
Et <-0  # experimental
N <- length(observed[[i]]) # number of observations for compartment i
# Check if observations and predictions have equal length
if(N != length(predicted[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
N_obs[i] <- N # populate tne N_obs vector
for (j in 1:N){
# sum of absolute squared errors (error = observed - predicted)
et <- et + (abs(observed[[i]][j] - predicted[[i]][j]))^2
# Sum of squared observed values
Et <- Et + (observed[[i]][j])^2
}
# root mean square of the absolute error
RMet2 <-sqrt(et/N)
# root mean of the square of observed values
RMEt2 <- sqrt(Et/N)
I[i] <- RMet2/RMEt2
}
# Total number of observations
Ntot <- sum(N_obs)
# Initialise the consolidated discrepancy index
Ic <-0
for (i in 1:Ncomp){
Ic <- Ic +  I[i]* N_obs[i]/Ntot
}
# Name the list of compartment discrepancy indices
if ( !is.null(comp.names)){
names(I) <- comp.names
}else if (!is.null(names(observed))){
names(I) <- names(observed)
} else if (!is.null(names(predicted)) && is.null(comp.names) ){
names(I) <- names(predicted)
}
return(Ic)
#return(list(Total_index = Ic, Compartment_index= I))
}
metric.print <- function(x){
solution <- x
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
print(pbpk.index(observed, predicted))
print(r.squared(observed, predicted))
print(AAFE(observed, predicted))
print(rmsd(observed, predicted))
print(two.fold(observed, predicted))
}
metric.print(solution)
metric.print <- function(x){
solution <- x
concentrations <- solution[solution$Time %in% time_points, 2:(dim(solution)[2]-2)]
excr_solution <-  data.frame(solution$Time, solution$Feces, solution$Urine)
excr_solution <- excr_solution[solution$Time %in% excretion_time_points, c(2:3)]
observed <- list()
predicted <- list()
for (i in 1:(length(concentrations))) {
observed[[i]] <- df[,i]
predicted[[i]] <- concentrations[,i]
}
observed[[i+1]] <- excretion[,1] #feces
observed[[i+2]] <- excretion[,2] #urine
predicted[[i+1]] <- excr_solution[,1] #feces
predicted[[i+2]] <- excr_solution[,2] #urine
print(paste0("PBPK index: ", pbpk.index(observed, predicted)))
print(paste0("R-squared: ", r.squared(observed, predicted)))
print(paste0("AAFE: ", AAFE(observed, predicted)))
print(paste0("RMSD: ", rmsd(observed, predicted)))
print(paste0("Two-fold percentage: ", two.fold(observed, predicted)))
}
metric.print(solution)
# Create a single data frame to hold the observation data
observations <- data.frame( Time =c(24,  72, 168, 360, 720), excretion, df)
library(ggplot2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("3P3X")),
size=1.5) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
create.plots <- function(compartment){
excreta <- compartment %in% c("Feces", "Urine")
ggplot(data = solution)+
geom_line( aes_string(x= "Time", y= rlang::expr(!!compartment), colour=shQuote("3P3X")),
size=1.5) +
geom_point(data=observations, aes_string(x="Time", y= rlang::expr(!!compartment),
colour=shQuote("Observations")), size=4)+
labs(title = rlang::expr(!!compartment),
y = ifelse(excreta,"TiO2 (mg)","TiO2 (mg/g tissue)" ),
x = "Time (hours)")+
theme(plot.title = element_text(hjust = 0.5))#+
# scale_y_continuous(trans='log10')
}
plots <- lapply(names(observations)[2:length(observations)],create.plots)
p1 <-  plots[[1]]
p2 <-  plots[[2]]
p3 <-  plots[[3]]
p4 <-  plots[[4]]
p5 <-  plots[[5]]
p6 <-  plots[[6]]
p7 <-  plots[[7]]
p8 <-  plots[[8]]
p9 <-  plots[[9]]
p10 <-  plots[[10]]
gridExtra::grid.arrange(p1,p2,p3,p4,nrow = 2)
gridExtra::grid.arrange(p5,p6,p7,p8,nrow = 2)
gridExtra::grid.arrange(p9,p10,nrow = 2)
grouping
